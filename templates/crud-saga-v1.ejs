import { call, put, select } from 'redux-saga/effects'
import <%= props.name %>Actions from './redux'
import { getAttributes, mapAttributes, updateMulti, insertMulti } from '../../Transforms/TransformAttributes'
import { merge } from 'ramda'
// import { showSagaMessage } from '../Translations/SagaMessages'
// import history from '../Services/BrowserHistory'

export const theData = state => state.<%= lowerCase(props.name) %>.data
export const theMulti = state => state.<%= lowerCase(props.name) %>.multi
export const theUserPrefs = state => state.user.preferences
export const transformedData = response => getAttributes(response.data)

export function * get<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.get<%= pascalCase(props.name) %>, data)

  // success?
  if (response.ok) {
    // You might need to change the response here - do this with a 'transform',
    // located in ../Transforms/. Otherwise, just pass the data back from the api.
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SingleSuccess(transformedData(response)))
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Data(transformedData(response)))
    // history.push('/path/to/some/url' + data.id, { type: '<%= lowerCase(props.name) %>'  })
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
  }
}

export function * post<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.post<%= props.name %>, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SingleSuccess(transformedData(response)))
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Data(transformedData(response)))
    const multi = yield select(theMulti)
    yield put(
      <%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(
        insertMulti(transformedData(response), multi)
      )
    )
    // yield call(showSagaMessage, 'saved')
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
    // yield call(showSagaMessage, 'error')
  }
}

export function * update<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const params = yield select(theData)
  const response = yield call(api.update<%= props.name %>, merge(data, params))

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SingleSuccess(transformedData(response)))
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Data(transformedData(response)))
    const multi = yield select(theMulti)
    yield put(
      <%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(
        updateMulti(transformedData(response), multi)
      )
    )
    // yield call(showSagaMessage, 'saved')
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
    // yield call(showSagaMessage, 'error')
  }
}

export function * remove<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.remove<%= props.name %>, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name)   %>Failure())
  }
}

export function * get<%= pascalCase(props.name) %>s (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.get<%= props.name %>s, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(mapAttributes(response.data)))
    // history.push('/path/to/some/url')
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name)   %>Failure())
  }
}
